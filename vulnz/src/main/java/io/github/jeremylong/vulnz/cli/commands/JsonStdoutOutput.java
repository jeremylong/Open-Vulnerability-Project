/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.vulnz.cli.commands;

import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;

import io.github.jeremylong.vulnz.cli.model.BasicOutput;

class JsonStdoutOutput<T> extends Output<T> {
    private JsonGenerator jsonOut;

    public JsonStdoutOutput(String rootFieldName, Boolean prettyPrint) throws Exception {
        super();
        JsonFactory jfactory = objectMapper.getFactory();
        jsonOut = jfactory.createGenerator(System.out, JsonEncoding.UTF8);
        if (prettyPrint) {
            jsonOut.useDefaultPrettyPrinter();
        }

        jsonOut.writeStartObject();
        jsonOut.writeFieldName(rootFieldName);
        jsonOut.writeStartArray();
    }

    @Override
    protected void writeOne(T t) throws Exception {
        jsonOut.writeObject(t);
    }

    @Override
    protected void done(BasicOutput output) throws Exception {
        jsonOut.writeEndArray();
        jsonOut.writeObjectField("results", output);
        jsonOut.writeEndObject();
    }

    @Override
    protected void close() throws Exception {
        jsonOut.close();
    }
}