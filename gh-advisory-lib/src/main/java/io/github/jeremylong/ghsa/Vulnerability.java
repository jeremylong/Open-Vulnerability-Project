/*
 *  Copyright 2023 Jeremy Long
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package io.github.jeremylong.ghsa;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.time.ZonedDateTime;
import java.util.Objects;

/**
 * A GitHub Security Advisory Identifier.
 *
 * <pre>
 * type SecurityAdvisoryIdentifier
 * </pre>
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class Vulnerability {

    @JsonProperty(value = "node", access = JsonProperty.Access.WRITE_ONLY)
    private VulnerabilityRecord node;

    /**
     * The first version containing a fix for the vulnerability.
     *
     * @return the first version containing a fix for the vulnerability.
     */
    public PackageVersion getFirstPatchedVersion() {
        return node.firstPatchedVersion;
    }

    /**
     * A description of the vulnerable package.
     *
     * @return a description of the vulnerable package.
     */
    public Package getPackage() {
        return node.pkg;
    }

    /**
     * The severity of the vulnerability within this package.
     *
     * @return the severity of the vulnerability within this package.
     */
    public Severity getSeverity() {
        return node.severity;
    }

    /**
     * When the vulnerability was last updated.
     *
     * @return when the vulnerability was last updated.
     */
    public ZonedDateTime getUpdatedAt() {
        return node.updatedAt;
    }

    /**
     * A string that describes the vulnerable package versions. This string follows a basic syntax with a few forms.
     *
     * <pre>
     *   `= 0.2.0` denotes a single vulnerable version.
     *   `&gt;= 1.0.8` denotes a version range up to and including the specified version
     *   `&lt; 0.1.11` denotes a version range up to, but excluding, the specified version
     *   `&gt;= 4.3.0, &lt; 4.3.5` denotes a version range with a known minimum and maximum version.
     *   `&gt;= 0.0.1` denotes a version range with a known minimum, but no known maximum
     * </pre>
     *
     * @return the range.
     */
    public String getVulnerableVersionRange() {
        return node.vulnerableVersionRange;
    }

    @Override
    public String toString() {
        return "Vulnerability[" + node + ']';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        Vulnerability that = (Vulnerability) o;
        return Objects.equals(node, that.node);
    }

    @Override
    public int hashCode() {
        return Objects.hash(node);
    }

    /**
     * An individual vulnerability within an Advisory.
     *
     * <pre>
     * type SecurityVulnerability
     * </pre>
     */
    @JsonIgnoreProperties(ignoreUnknown = true)
    static class VulnerabilityRecord {
        @JsonProperty("firstPatchedVersion")
        private PackageVersion firstPatchedVersion;

        @JsonProperty("package")
        private Package pkg;

        @JsonProperty("severity")
        private Severity severity;

        @JsonProperty("updatedAt")
        private ZonedDateTime updatedAt;

        @JsonProperty("vulnerableVersionRange")
        private String vulnerableVersionRange;

        @Override
        public String toString() {
            return "VulnerabilityRecord{" + "firstPatchedVersion=" + firstPatchedVersion + ", pkg=" + pkg
                    + ", severity=" + severity + ", updatedAt=" + updatedAt + ", vulnerableVersionRange='"
                    + vulnerableVersionRange + '\'' + '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o)
                return true;
            if (o == null || getClass() != o.getClass())
                return false;
            VulnerabilityRecord that = (VulnerabilityRecord) o;
            return Objects.equals(firstPatchedVersion, that.firstPatchedVersion) && Objects.equals(pkg, that.pkg)
                    && severity == that.severity && Objects.equals(updatedAt, that.updatedAt)
                    && Objects.equals(vulnerableVersionRange, that.vulnerableVersionRange);
        }

        @Override
        public int hashCode() {
            return Objects.hash(firstPatchedVersion, pkg, severity, updatedAt, vulnerableVersionRange);
        }
    }
}
