/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023-2024 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability.client.nvd;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({"sourceIdentifier", "tags"})
public class CveTag implements Serializable {
    private static final long serialVersionUID = 6119071096772721680L;

    /**
     * The email address or UUID of the source that contributed the information
     */
    @JsonProperty("sourceIdentifier")
    private String sourceIdentifier;

    @JsonProperty("tags")
    private List<TagType> tags;

    public CveTag() {
    }

    public CveTag(String sourceIdentifier, List<TagType> tags) {
        this.sourceIdentifier = sourceIdentifier;
        this.tags = tags;
    }

    /**
     * @return sourceIdentifier
     */
    public String getSourceIdentifier() {
        return sourceIdentifier;
    }

    /**
     * @return tags
     */
    public List<TagType> getTags() {
        return tags;
    }

    @Override
    public String toString() {
        return "CveTag{" +
                "sourceIdentifier='" + sourceIdentifier + '\'' +
                ", tags=" + tags +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        CveTag cveTag = (CveTag) o;
        return Objects.equals(sourceIdentifier, cveTag.sourceIdentifier) && Objects.equals(tags, cveTag.tags);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceIdentifier, tags);
    }

    public enum TagType {
        UNSUPPORTED_WHEN_ASSIGNED("unsupported-when-assigned"), EXCLUSIVELY_HOSTED_SERVICE("exclusively-hosted-service"), DISPUTED("disputed");

        private final static Map<String, TagType> CONSTANTS = new HashMap<>();

        static {
            for (TagType c : values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private final String value;

        TagType(String value) {
            this.value = value;
        }

        @JsonCreator
        public static TagType fromValue(String value) {
            TagType constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }
    }
}
