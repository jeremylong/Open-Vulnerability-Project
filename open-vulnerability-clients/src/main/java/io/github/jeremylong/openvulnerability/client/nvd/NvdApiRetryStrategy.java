/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability.client.nvd;

import org.apache.hc.client5.http.impl.DefaultHttpRequestRetryStrategy;
import org.apache.hc.core5.http.HttpResponse;
import org.apache.hc.core5.http.protocol.HttpContext;
import org.apache.hc.core5.util.TimeValue;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

/**
 * Implements a back-off delay retry strategy.
 */
public class NvdApiRetryStrategy extends DefaultHttpRequestRetryStrategy {
    /**
     * Maximum number of allowed retries.
     */
    private final int maxRetries;

    /**
     * Retry interval between subsequent retries in milliseconds.
     */
    private final long delay;

    public NvdApiRetryStrategy(int maxRetries, long delay) {
        super(maxRetries, TimeValue.of(delay, TimeUnit.MILLISECONDS), new ArrayList<Class<? extends IOException>>(),
                Arrays.asList(503));
        this.maxRetries = maxRetries;
        this.delay = delay;
    }

    @Override
    public TimeValue getRetryInterval(final HttpResponse response, final int execCount, final HttpContext context) {

        if (execCount < maxRetries / 2) {
            return TimeValue.of(delay * execCount, TimeUnit.MILLISECONDS);
        }

        return TimeValue.of(delay * execCount / 2, TimeUnit.MILLISECONDS);
    }
}
