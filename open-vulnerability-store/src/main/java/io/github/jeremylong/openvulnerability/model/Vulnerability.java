/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023-2024 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import org.hibernate.annotations.UuidGenerator;

import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * A slightly modified OSV schema. Notable changes include:
 * <ul>
 * <li>The implementation does not use events; rather version ranges which more closely resemble GHSA version ranges.
 * This also adds CWE.</li>
 * <li>Vulnerabilities do not have an "ID" or "aliases" - rather a list of identifiers</li>
 * <li>A source was added to indicate the source (GHSA, NVD, etc.) that includes a withdrawn date for each source.</li>
 * <li>Severity also includes a text severity (to represent high, medium, low, etc.) and the numeric score</li>
 * </ul>
 *
 * @see <a href="https://ossf.github.io/osv-schema/">https://ossf.github.io/osv-schema/</a>
 */
@Entity
@Table(name = "VULNERABILITY")
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonPropertyOrder({"identifiers", "summary", "severity", "affected", "related", "details", "cwes", "references",
        "credits", "sources", "modified", "published", "withdrawn"})
public class Vulnerability {
    @Id
    @GeneratedValue
    @UuidGenerator
    @Column(name = "DATABASE_ID", nullable = false, unique = true)
    @JsonIgnore
    private UUID databaseId;

    @JsonProperty("modified")
    @Column(name = "MODIFIED")
    private ZonedDateTime modified;

    @JsonProperty("published")
    @Column(name = "PUBLISHED")
    private ZonedDateTime published;

    @JsonProperty("withdrawn")
    @Column(name = "WITHDRAWN")
    private ZonedDateTime withdrawn;

    @JsonProperty("identifiers")
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "IDENTIFIERS", joinColumns = @JoinColumn(name = "DATABASE_ID"), indexes = {
            @Index(name = "idx_identifier", columnList = "identifier")})
    @Column(name = "IDENTIFIER")
    private List<String> identifiers = new ArrayList<>();

    @JsonProperty("related")
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "RELATED", joinColumns = @JoinColumn(name = "DATABASE_ID"))
    @Column(name = "RELATED")
    private List<String> related = new ArrayList<>();

    @JsonProperty("summary")
    @Column(name = "SUMMARY")
    private String summary;

    @JsonProperty("details")
    @Column(name = "DETAILS")
    private String details;

    @JsonProperty("severity")
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JoinColumn(name = "DATABASE_ID")
    private List<Severity> severities = new ArrayList<>();

    @JsonProperty("affected")
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JoinColumn(name = "DATABASE_ID")
    private List<Affected> affected = new ArrayList<>();

    @JsonProperty("cwes")
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JoinColumn(name = "DATABASE_ID")
    private List<CWE> cwes = new ArrayList<>();

    @JsonProperty("references")
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JoinColumn(name = "DATABASE_ID")
    private List<Reference> references = new ArrayList<>();

    @JsonProperty("credits")
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JoinColumn(name = "DATABASE_ID")
    private List<Credit> credits = new ArrayList<>();

    /**
     * what database was this vulnerability sourced from.
     */
    @JsonProperty("sources")
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JoinColumn(name = "DATABASE_ID")
    private List<Source> sources = new ArrayList<>();

    public UUID getDatabaseId() {
        return databaseId;
    }

    public ZonedDateTime getModified() {
        return modified;
    }

    public void setModified(ZonedDateTime modified) {
        this.modified = modified;
    }

    public ZonedDateTime getPublished() {
        return published;
    }

    public void setPublished(ZonedDateTime published) {
        this.published = published;
    }

    public ZonedDateTime getWithdrawn() {
        return withdrawn;
    }

    public void setWithdrawn(ZonedDateTime withdrawn) {
        this.withdrawn = withdrawn;
    }

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public List<String> getIdentifiers() {
        return identifiers;
    }

    public boolean addIdentifier(String identifier) {
        return identifiers.add(identifier);
    }

    public boolean removeIdentifier(String identifier) {
        return identifiers.remove(identifier);
    }

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public List<String> getRelated() {
        return related;
    }

    public boolean addRelated(String related) {
        return this.related.add(related);
    }

    public boolean removeRelated(String related) {
        return this.related.remove(related);
    }

    public String getSummary() {
        return summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public List<Severity> getSeverities() {
        return severities;
    }

    public boolean addSeverity(Severity severity) {
        return severities.add(severity);
    }

    public boolean removeSeverity(Severity severity) {
        return severities.remove(severity);
    }

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public List<Affected> getAffected() {
        return affected;
    }

    public boolean addAffected(Affected affected) {
        return this.affected.add(affected);
    }

    public boolean removeAffected(Affected affected) {
        return this.affected.remove(affected);
    }

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public List<CWE> getCwes() {
        return cwes;
    }

    public boolean addCwe(CWE cwe) {
        return cwes.add(cwe);
    }

    public boolean removeCwe(CWE cwe) {
        return cwes.remove(cwe);
    }

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public List<Reference> getReferences() {
        return references;
    }

    public boolean addReference(Reference reference) {
        return references.add(reference);
    }

    public boolean removeReference(Reference reference) {
        return references.remove(reference);
    }

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public List<Credit> getCredits() {
        return credits;
    }

    public boolean addCredit(Credit credit) {
        return credits.add(credit);
    }

    public boolean removeCredit(Credit credit) {
        return credits.remove(credit);
    }

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public List<Source> getSources() {
        return sources;
    }

    public boolean addSource(Source source) {
        return sources.add(source);
    }

    public boolean removeSource(Source source) {
        return sources.remove(source);
    }
}
