/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023-2024 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import org.hibernate.annotations.UuidGenerator;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Entity
@Table(name = "RANGE")
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonPropertyOrder({"type", "repo", "versionRanges"})
public class Range {
    @Id
    @GeneratedValue
    @UuidGenerator
    @Column(name = "ID", nullable = false, unique = true)
    @JsonIgnore
    private UUID id;

    /**
     * SEMVER, ECOSYSTEM, or GIT.
     */
    @JsonProperty("type")
    @Column(name = "TYPE")
    private String type;

    /**
     * URL of the packageâ€™s code repository for a `git clone`.
     */
    @JsonProperty("repo")
    @Column(name = "REPO")
    private String repo;

    /**
     * This implementation differs from OSV and the OpenSSF formats to more closely align with GHSA ranges. Example
     * >=1.0.0, <3.0.1
     */
    @JsonProperty("versionRanges")
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JoinColumn(name = "RANGE_ID")
    private List<VersionRange> versionRanges = new ArrayList<>();

    public UUID getId() {
        return id;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getRepo() {
        return repo;
    }

    public void setRepo(String repo) {
        this.repo = repo;
    }

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public List<VersionRange> getVersionRanges() {
        return versionRanges;
    }

    public boolean addVersionRange(VersionRange versionRange) {
        return versionRanges.add(versionRange);
    }

    public boolean removeVersionRange(VersionRange versionRange) {
        return versionRanges.remove(versionRange);
    }
}
