/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.vulntools.database;

import jakarta.persistence.Entity;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.annotation.Annotation;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Set;

public final class HibernateHelper {

    private HibernateHelper() {
    }

    public static Set<Class<?>> getEntityClassesFromPackage(ClassLoader classLoader, String packageName) {

        Set<Class<?>> classes = getClassesFromPackage(classLoader, packageName);
        for (Class<?> cls : classes) {
            Annotation[] annotations = cls.getAnnotations();
            for (Annotation annotation : annotations) {
                if (annotation instanceof Entity) {
                    classes.add(cls);
                }
            }
        }
        return classes;
    }

    private static Set<Class<?>> getClassesFromPackage(ClassLoader classLoader, String packageName) {
        final Set<Class<?>> classes = new HashSet<>();
        final String packagePath = packageName.replaceAll("[.]", "/");
        try (InputStream stream = classLoader.getResourceAsStream(packagePath);
                BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.endsWith(".class")) {
                    final String fqcn = packageName + "." + line.substring(0, line.length() - 6);
                    try {
                        classes.add(Class.forName(fqcn));
                    } catch (ClassNotFoundException e) {
                        // ignore
                    }
                }
            }
        } catch (IOException exception) {
            System.err.println(exception.getMessage());
        }
        return classes;
    }
}
